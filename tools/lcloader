#!/usr/local/bin/ruby -w

# lcloader - Take the XML that the LC FRBRization tool generates
# and load it up into OpenFRBR.
#
# William Denton <wtd@pobox.com>
# Released under the MIT License.

# Copyright (c) 2008 William Denton
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# INSTALLATION
#
# Requires the xml-simple gem.
#
# $ sudo gem install xml-simple

#require 'rubygems'
#require 'xmlsimple'

require "rexml/document"
include REXML

lcxml = ARGV[0]

if lcxml.nil?
  puts "No XML file specified"
  exit 0
end

file = File.open(lcxml)
doc = REXML::Document.new file

# data = XmlSimple.xml_in(lcxml)

# works = Work.find(:all)

#works.each do |w|	
#  puts w.title
#end

# p data

# puts XPath.first(doc, "//work")


#doc.each_child do |c|
#  puts c
#end

doc.elements.each('frbr/work') do |w|

  # Work attributes we know from the LC tool:
  #  title
  # Don't know
  #  form
  #  date

  # !!! Can we assume the form is always a novel, given
  # how the tool works and the data we're giving it?  Probably.

  title = w.elements['mods:titleInfo/mods:title'].text
  form  = "novel?"

  puts "W Title: " + title

  work = Work.new(:title => title, :form => form);
  work.save

  # We will assume that all of the names associated with a
  # work are Person entities.
  # TODO: Make a way to change a Group 2 entity from one type
  # to another.

  # Person attributes we know:
  #  name
  # Don't know
  #  dates
  #  title
  #  other_designation
  #  affiliation
  #  country

  w.elements.each('mods:name') do |n|
    puts "W Person: " + n.elements['mods:namePart'].text
    puts "W Role: " + n.elements['mods:role/mods:text'].text

    # TODO Add a role attribute to the Creation model so we can
    # save that.

    person = Person.find_or_create_by_name(:name => n.elements['mods:namePart'].text)
    person.save
    work.creators << person
    work.save
  end

  # Expression attributes we know:
  #  title (assume same as work)
  #  form (expression/mods:typeOfResource)
  #  language (expression/mods:language) (uses ISO639-2B)
  # Don't know
  #  date

  w.elements.each('expression') do |e|

    expression_title = title
    expression_form = e.elements['mods:typeOfResource'].text
    expression_language = e.elements['mods:language'].nil? ? "eng?" : e.elements['mods:language'].text

    puts "  E Form: " + expression_form
    puts "  E Language: " + expression_language

    expression = Expression.new(:title => expression_title, 
      :form => expression_form, 
      :language => expression_language) 
    expression.save

    reification = Reification.new(:work_id => work.id, 
      :expression_id => expression.id, 
      :relation => "")
    reification.save

    e.elements.each('manifestation') do |m|
      # I'm going to treat each imprint as a manifestation.
      # Not sure what LC's doing here with manifestations and imprints.

      # Manifestation attributes we know:
      #  title (manifestation/imprint/mods:titleInfo/mods:title)
      #  statement_of_responsibility (manifestation/imprint/mods:note["statement of responsibility"]
      #  edition (manifestation/imprint/mods:originInfo/mods:edition)
      #  identifier (manifestation/imprint/mods:identifier["ISBN"])
      #  publisher (manifestation/imprint/mods:originInfo/mods:publisher)
      #  publication_date (manifestation/imprint/mods:originInfo/mods:dateIssued)
      # Don't know:
      #  form_of_carrier
      #  publication_place
      #  series_statement
      #
      # Not used:
      #  manifestation/imprint/mods:physicalDescription/mods:extent

      m.elements.each('imprint') do |i|
        manifestation_title = i.elements['mods:titleInfo/mods:title'].text
	manifestation_statement_of_responsibility = i.elements['mods:note["statement of responsibility"]'].nil? ? "" : i.elements['mods:note["statement of responsibility"]'].text 
        # Found a case where there's a <mods:edition/> empty element, so || "" handles it
	manifestation_edition = i.elements['mods:originInfo/mods:edition'].nil? ? "" : i.elements['mods:originInfo/mods:edition'].text || ""

	manifestation_publisher = i.elements['mods:originInfo/mods:publisher'].nil? ? "" : i.elements['mods:originInfo/mods:publisher'].text
        manifestation_publisher = "[unknown]" if manifestation_publisher.length == 0

	manifestation_publication_date = i.elements['mods:originInfo/mods:dateIssued'].nil? ? "" : i.elements['mods:originInfo/mods:dateIssued'].text

        # TODO Handle instances of multiple ISBN lines, like
        # <mods:identifier type="ISBN">(kass. 1-6)</mods:identifier>
        # <mods:identifier type="ISBN">91-7951-057-4 (kass. 1-10)</mods:identifier>

	identifier = i.elements['mods:identifier["ISBN"]'].nil? ? "" : i.elements['mods:identifier["ISBN"]'].text
        (manifestation_isbn, identifier_qualifiers) = identifier.split(" ", 2)
        manifestation_isbn.gsub!(/[^0-9X]/, '')
        manifestation_isbn = "[]" if manifestation_isbn.length == 0

	manifestation_form_of_carrier = "book?"
        manifestation_form_of_carrier = "hardcover" if /\((hardcover|hc)/.match(identifier_qualifiers)
        manifestation_form_of_carrier = "paperback" if /paperback/.match(identifier_qualifiers)

        puts "    M Title: " + manifestation_title
        puts "    M Statement of responsibility: " + manifestation_statement_of_responsibility
        puts "    M Edition: " + manifestation_edition
        puts "    M Form of carrier: " + manifestation_form_of_carrier
        puts "    M Publisher: " + manifestation_publisher
        puts "    M Publication date: " + manifestation_publication_date
        puts "    M Identifier: " + manifestation_isbn

	manifestation = Manifestation.new(:title => manifestation_title,
          :statement_of_responsibility => manifestation_statement_of_responsibility,
	  :edition => manifestation_edition,
          :publisher => manifestation_publisher,
          :publication_date => manifestation_publication_date,
	  :identifier => manifestation_isbn,
	  :form_of_carrier => manifestation_form_of_carrier,
	  :expression_id => expression.id)
        
        begin
          manifestation.save 
        rescue Exception => error
          puts "*** ERROR Manifestation save failed: '#{error}'"
        end

        # Connect the manifestation to the publisher, which we will assume
        # is a CorporateBody.
        # TODO: Handle case of multiple publishers.

        publisher = CorporateBody.find_or_create_by_name(manifestation_publisher)
        begin
          publisher.save 
          manifestation.producers << publisher
        rescue Exception => error
          puts "*** ERROR Publisher association/save failed: '#{error}'"
        end

      end
    end
  end
end

#doc.write ($stdout, 2)
#output = "" 
#doc.write output





